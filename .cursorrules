# Cursor Rules for My Python Project

## Project Overview
This is a Python project with a modular structure including:
- Main application code in `src/`
- Tests in `tests/`
- Configuration in `config/`
- Scripts in `scripts/`
- Documentation in `docs/`

## Code Style and Standards

### Python Code Style
- Follow PEP 8 style guidelines
- Use type hints for all function parameters and return values
- Use descriptive variable and function names
- Write docstrings for all classes and functions
- Use f-strings for string formatting
- Prefer list/dict comprehensions when appropriate

### Import Organization
```python
# Standard library imports
import os
import sys
from pathlib import Path

# Third-party imports
import requests
import numpy as np

# Local imports
from src.utils import helper_function
from config.settings import APP_CONFIG
```

### Error Handling
- Use specific exception types
- Include meaningful error messages
- Log errors appropriately
- Handle edge cases gracefully

### Testing
- Write unit tests for all public functions
- Use pytest for testing framework
- Aim for high test coverage
- Use descriptive test names
- Test both success and failure cases

## File Structure Guidelines

### Source Code (`src/`)
- Place main application logic here
- Use `__init__.py` files to make directories into packages
- Keep modules focused on single responsibilities
- Use meaningful module names

### Tests (`tests/`)
- Mirror the structure of `src/`
- Use `test_` prefix for test files
- Use `Test` prefix for test classes
- Use `test_` prefix for test methods

### Configuration (`config/`)
- Store all configuration in this directory
- Use environment variables for sensitive data
- Provide default values for all settings
- Document configuration options

### Scripts (`scripts/`)
- Place utility and setup scripts here
- Make scripts executable
- Include proper error handling
- Document script usage

## Development Workflow

### Before Committing
1. Run code formatting: `black src/ tests/`
2. Run linting: `flake8 src/ tests/`
3. Run type checking: `mypy src/`
4. Run tests: `pytest tests/ -v`
5. Update documentation if needed

### Code Review Guidelines
- Check for proper error handling
- Verify test coverage
- Ensure type hints are present
- Review for security vulnerabilities
- Check performance implications

## Documentation Standards

### Docstrings
Use Google-style docstrings:
```python
def example_function(param1: str, param2: int) -> bool:
    """Brief description of the function.
    
    Longer description if needed.
    
    Args:
        param1: Description of param1
        param2: Description of param2
        
    Returns:
        Description of return value
        
    Raises:
        ValueError: When param1 is invalid
    """
    pass
```

### README Updates
- Keep README.md up to date
- Include setup instructions
- Document new features
- Provide usage examples

## Security Guidelines

### Data Handling
- Never commit sensitive data (API keys, passwords)
- Use environment variables for configuration
- Validate all input data
- Sanitize user inputs

### Dependencies
- Keep dependencies up to date
- Use specific version numbers in requirements.txt
- Regularly audit dependencies for vulnerabilities
- Remove unused dependencies

## Performance Guidelines

### Code Optimization
- Use appropriate data structures
- Avoid premature optimization
- Profile code when performance is critical
- Use generators for large datasets
- Cache expensive computations when appropriate

### Memory Management
- Be mindful of memory usage
- Use context managers for resource management
- Clean up temporary files
- Monitor memory usage in long-running processes

## AI Assistant Guidelines

### When Using AI Assistance
- Always review AI-generated code
- Test AI-generated code thoroughly
- Understand the code before using it
- Ask for explanations of complex logic
- Request code improvements and optimizations

### Code Generation Requests
- Be specific about requirements
- Provide context about the project
- Ask for error handling
- Request test cases
- Ask for documentation

## Common Patterns

### Configuration Management
```python
from config.settings import get_setting

def my_function():
    api_key = get_setting('API_KEY')
    if not api_key:
        raise ValueError("API_KEY not configured")
```

### Logging
```python
import logging

logger = logging.getLogger(__name__)

def my_function():
    logger.info("Starting process")
    try:
        # Process logic
        logger.info("Process completed successfully")
    except Exception as e:
        logger.error(f"Process failed: {e}")
        raise
```

### Error Handling
```python
def safe_operation(data: dict) -> bool:
    """Perform operation with proper error handling."""
    try:
        validate_data(data)
        result = process_data(data)
        return result
    except ValidationError as e:
        logger.error(f"Validation failed: {e}")
        return False
    except ProcessingError as e:
        logger.error(f"Processing failed: {e}")
        return False
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        return False
```

## Project-Specific Rules

### This Project
- Focus on clean, maintainable code
- Prioritize readability over cleverness
- Write comprehensive tests
- Document all public APIs
- Use type hints consistently
- Follow the established project structure

### File Naming
- Use snake_case for Python files
- Use descriptive names that indicate purpose
- Avoid abbreviations when possible
- Use consistent naming patterns

### Comments
- Write comments for complex logic
- Explain "why" not "what"
- Keep comments up to date
- Remove commented-out code before committing

Remember: The goal is to write code that is easy to read, understand, and maintain. When in doubt, prioritize clarity over brevity.
